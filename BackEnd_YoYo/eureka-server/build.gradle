plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.palantir.docker' version '0.35.0'
}

group = 'com.yoyo.eureka'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}


dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

ext {
    axonVersion = "4.6.0"
    springCloudVersion = "2023.0.3"
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


tasks.named('test') {
    useJUnitPlatform()
}

docker {
    println(tasks.bootJar.outputs.files)
    // 이미지 이름
    name rootProject.name+'-'+project.name+":"+version
    // 어떤 Dockerfile
    dockerfile file('../Dockerfile')
    // 어떤 파일들을 Dockerfile에 복사할 것인가
    files tasks.bootJar.outputs.files
    // Dockerfile에 전달할 인자
    buildArgs(['JAR_FILE':tasks.bootJar.outputs.files.singleFile.name])
}
